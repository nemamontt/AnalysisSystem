using Common.Databases;
using CreatorExploitDatabase.Core;
using HtmlAgilityPack;
using System.Collections.ObjectModel;
using System.IO;
using System.Net.Http;

namespace CreatorExploitDatabase.MVVM.Model
{
    public class EDBParser
    {
        private Config config;
        private readonly string filePath;
        private readonly HttpClient httpClient;
        public event Action<string> MessageChanged;

        public EDBParser(Config config, string filePuth)
        {
            this.filePath = filePuth;
            this.config = config;

            if (!Directory.Exists(filePath))
            {
                Directory.CreateDirectory(filePath);
            }

            var handler = new HttpClientHandler
            {
                ClientCertificateOptions = ClientCertificateOption.Manual,
                ServerCertificateCustomValidationCallback =
               (httpRequestMessage, cert, cetChain, policyErrors) => { return true; }
            };
            httpClient = new HttpClient(handler)
            {
                Timeout = TimeSpan.FromSeconds(30),
            };
            httpClient.DefaultRequestHeaders.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36");
            httpClient.DefaultRequestHeaders.Add("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
            httpClient.DefaultRequestHeaders.Add("Accept-Language", "en-US,en;q=0.5");
            //httpClient.DefaultRequestHeaders.Add("Referer", "https://www.exploit-db.com");
        }

        public async Task<ObservableCollection<Exploit>> GetExploitDatabase(Func<bool> cancellationRequested)
        {          
            MessageChanged?.Invoke("Модуль парсинга запущен");

            int counter = config.StartPoint;
            if (counter is not 0)
            {
                MessageChanged?.Invoke($"Продолжение парсинга с {counter} записи");
            }

            ObservableCollection<Exploit> database = [];
            var rnd = new Random();
            HtmlWeb web = new();
            
            while (true)
            {
                if (cancellationRequested())
                {
                    MessageChanged?.Invoke("Модуль парсинга принудительно остановлен");
                    config.StartPoint = counter;
                    break;
                }
                     
                if(counter%5 is 0)
                {
                    var stopValue = rnd.Next(5000, 10000);
                    MessageChanged?.Invoke($"Приостановлено на {stopValue / 1000} сек.");
                    await Task.Delay(stopValue);
                }
               
                var exploitVdbUrl = config.ExploitUrlVdb + $"exploits/{counter}";
                var exploitVulnersUrl = config.ExploitUrlVulners + counter;

                MessageChanged?.Invoke($"Обращение к {exploitVdbUrl}");

                var exploitVdbResponse = await httpClient.GetAsync(exploitVdbUrl);
                var exploitVulnersResponse = await httpClient.GetAsync(exploitVulnersUrl);
                if ((int)exploitVdbResponse.StatusCode is 404 || (int)exploitVulnersResponse.StatusCode is 404)
                {
                    MessageChanged?.Invoke($"Запись {counter} не существует");
                    counter++;
                    continue;
                }
                exploitVdbResponse.EnsureSuccessStatusCode();
                exploitVulnersResponse.EnsureSuccessStatusCode();

                var htmlVbd = await exploitVdbResponse.Content.ReadAsStringAsync();
                var htmlVulners = await exploitVulnersResponse.Content.ReadAsStringAsync();

                HtmlDocument docVbd = new();
                HtmlDocument docVulners = new();
                docVbd.LoadHtml(htmlVbd);
                docVulners.LoadHtml(htmlVulners);

                var name = docVbd.DocumentNode.SelectSingleNode("//h1[contains(@class,'card-title')]")?.InnerText.Trim();
                if (name is "404")
                {
                    MessageChanged?.Invoke("Конец выполнения");
                    config.StartPoint = counter;
                    break;
                }
                    
                var downloadUrl = config.ExploitUrlVdb + $"download/{counter}";
                MessageChanged?.Invoke($"Обращение к {downloadUrl}");
                using HttpResponseMessage downloadResponse = await httpClient.GetAsync(downloadUrl);

                var statusCode = (int)downloadResponse.StatusCode;
                if (statusCode is 429 or 403)
                {
                    MessageChanged?.Invoke("Работа приостановлена на 5 минут");
                    await Task.Delay(300000);
                    continue;
                }

                using var stream = await downloadResponse.Content.ReadAsStreamAsync();
                using var fileStream = File.Create(Path.Combine(filePath, $"{counter}.txt"));
                await stream.CopyToAsync(fileStream);


                var id = docVbd.DocumentNode.SelectSingleNode("(//h6[contains(@class,'stats-title')])[1]")?.InnerText.Trim();
                var cve = docVbd.DocumentNode.SelectSingleNode("//a[contains(@href, '/vuln/detail/CVE-')]")?.InnerText.Trim();
                var description = docVulners.DocumentNode.SelectSingleNode("//*[contains(@class, 'Description-root')]//p")?.InnerText.Trim();                
                var author = docVbd.DocumentNode.SelectSingleNode("(//div[contains(@class,'col-6 text-center')]/h6/a)[2]")?.InnerText.Trim();
                var type = docVbd.DocumentNode.SelectSingleNode("//a[contains(@href, 'type=')]")?.InnerText.Trim();
                var platform = docVbd.DocumentNode.SelectSingleNode("//a[starts-with(@href, '/?platform=')]")?.InnerText.Trim();
                var datePublication = docVbd.DocumentNode.SelectSingleNode("(//div[contains(@class,'col-6 text-center')]/h6/a)[1]")?.InnerText.Trim();

                var nCol6A = docVbd.DocumentNode.SelectSingleNode("(//div[contains(@class,'col-6 text-center')]/h6/a)[n]")?.InnerText.Trim(); //что это
                database.Add(new()
                {
                    Id = id,
                    Name = name,
                    Cve = cve,
                    Description = description,
                    Author = author,
                    Type = type,
                    Platform = platform,
                    DatePublication = datePublication,
                });

                MessageChanged?.Invoke($"Добавлена запись {counter}");

                counter++;
            }
            config.StartPoint = counter;
            return database;
        }
    }
}