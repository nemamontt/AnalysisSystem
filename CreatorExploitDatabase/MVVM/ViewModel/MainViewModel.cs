using Common.Core;
using Common.Databases;
using Common.Enums.ForSolution;
using CreatorExploitDatabase.Core;
using CreatorExploitDatabase.MVVM.Model;
using Microsoft.Win32;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Windows;
using ViewModels;

namespace CreatorExploitDatabase.MVVM.ViewModel
{
    public class MainViewModel : ViewModelBase
    {
        public ObservableCollection<Exploit> Exploits { get => Get<ObservableCollection<Exploit>>(); set => Set(value); }
        public string Status { get => Get<string>(); set => Set(value); }
        public bool Progress { get => Get<bool>(); set => Set(value); }
        private readonly MessageService messageService;
        private readonly BackgroundWorker creatorDatabase;
        private readonly EDBParser model;
        private Config config;

        public MainViewModel()
        {
            Exploits = [];
            Progress = false;
            messageService = new();

            config = FileManager.Load<Config>(Globals.configPath, FileType.Setting) ?? new();
            model = new(config, Globals.filePath);
            model.MessageChanged += ModelMessageChanged;

            creatorDatabase = new()
            {
                WorkerSupportsCancellation = true,
            };
            creatorDatabase.DoWork += new DoWorkEventHandler(StartCreation);
            creatorDatabase.RunWorkerCompleted += new RunWorkerCompletedEventHandler(CompletedCreation);
        }

        public RelayCommand Begin => GetCommand(o =>
        {
            if (creatorDatabase.IsBusy)
            {
                messageService.ShowInfoMessage("Идет выполнение задачи");
            }
            else
            {
                creatorDatabase.RunWorkerAsync();
            }

        });
        public RelayCommand Save => GetCommand(o =>
        {
            SaveFileDialog sfd = new()
            {
                Filter = "json files (*.json)|*.json"
            };
            if (sfd.ShowDialog() is true)
            {
                if(FileManager.Save(Exploits, FileType.Exploit, sfd.FileName))
                    messageService.ShowInfoMessage("Файл успешно сохранен");
            }  
        });
        public RelayCommand View => GetCommand(o =>
        {
            OpenFileDialog openFileDialog = new()
            {
                Filter = "Json files (*.json)|*.json"
            };
            if (openFileDialog.ShowDialog() is true)
            {
                Exploits = FileManager.Load<ObservableCollection<Exploit>>(openFileDialog.FileName, FileType.Exploit) ?? [];
            }
        });
        public RelayCommand Stop => GetCommand(o =>
        {
            creatorDatabase.CancelAsync();
        });
        public RelayCommand OpenFile => GetCommand(o =>
        {
            string fullPath = Path.Combine(Globals.filePath, $"{o}.txt");
            if (File.Exists(fullPath))
            {
                System.Diagnostics.Process.Start("notepad.exe", fullPath);
            }
        });

        private void StartCreation(object? sender, DoWorkEventArgs e)
        {
            if (File.Exists(Globals.databasePath))
                Exploits =  FileManager.Load<ObservableCollection<Exploit>>(Globals.databasePath, FileType.Exploit) ?? [];
            Progress = true;
            e.Result = model.GetExploitDatabase(() => creatorDatabase.CancellationPending).Result;
        }
        private void CompletedCreation(object? sender, RunWorkerCompletedEventArgs e)
        {
            if (e.Error is not null)
            {
                messageService.ShowErrorMessage($"Возникла ошибка\nПодробнее: {e.Error.Message}");
            }
            else if (e.Cancelled)
            {
                messageService.ShowInfoMessage("Операция была отменена");
            }
            else
            {          
                foreach (var item in (ObservableCollection<Exploit>)e.Result)
                {
                    Exploits.Add(item);
                } //ОПТИМИЗИРОВАТЬ 
                FileManager.Save(config, FileType.Setting, Globals.configPath);
                FileManager.Save(Exploits, FileType.Exploit, Globals.databasePath);
            }
            Progress = false;
        }
        private void ModelMessageChanged(string status)
        {
            Application.Current.Dispatcher.Invoke(() => Status += $"\n\n{status}");
        }
        public void SaveFile()
        {
            FileManager.Save(config, FileType.Setting, Globals.configPath);
        }
    }
}