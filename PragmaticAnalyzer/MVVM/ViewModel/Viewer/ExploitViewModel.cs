using PragmaticAnalyzer.Abstractions;
using PragmaticAnalyzer.Configs;
using PragmaticAnalyzer.Databases;
using PragmaticAnalyzer.DTO;
using PragmaticAnalyzer.MVVM.Model;
using PragmaticAnalyzer.Services;
using System.Collections.ObjectModel;
using System.Windows;
using ViewModels;

namespace PragmaticAnalyzer.MVVM.ViewModel.Viewer
{
    public class ExploitViewModel : ViewModelBase
    {
        private ExploitConfig _config;
        private readonly ExploitModel _model;
        private readonly IFileService _fileService;
        private readonly Func<string, DataType, Task> UpdateConfig;
        public ObservableCollection<Exploit> Exploits { get; set; }
        public Exploit? SelectedExploit { get => Get<Exploit?>(); set => Set(value); }
        public string Status { get => Get<string>(); set => Set(value); }
        public bool Progress { get => Get<bool>(); set => Set(value); }

        public ExploitViewModel(ObservableCollection<Exploit> exploits, Func<string, DataType, Task> updateConfig, ExploitConfig exploitConfig)
        {
            Exploits = exploits;
            UpdateConfig = updateConfig;
            Progress = false;
            _fileService = new FileService();
            _config = exploitConfig;
            _model = new(MessageChanged, _config);
        }

        public RelayCommand Update => GetCommand(async o =>
        {
           /* Progress = true;
            var newThreats = await _model.
            if (newThreats is null) return;
            Threats.Clear();
            foreach (var value in newThreats)
            {
                Threats.Add(value);
            }
            await _fileService.SaveDTOAsync(Threats, DataType.Threat, ThreatPath);
            UpdateConfig?.Invoke(DateTime.Now.ToString("f"), DataType.Threat, ThreatPath);
            Progress = false;*/
        });

        public RelayCommand Stop => GetCommand(async o =>
        {
        });

        private void MessageChanged(string status)
        {
            Application.Current.Dispatcher.Invoke(() => Status += $"\n\n{status}");
        }
    }
}